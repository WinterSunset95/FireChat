



import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Message from '../components/Message'
import User from '../components/User'
import {useState, useEffect} from 'react'
import { db } from '../firebase/Firebase'
import { collection, getDoc, doc, query, orderBy, addDoc } from 'firebase/firestore'
import { useCollectionData } from 'react-firebase-hooks/firestore'
import { getAuth, onAuthStateChanged, signInWithPopup, GoogleAuthProvider, signOut } from 'firebase/auth'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faPaperPlane, faXmarkCircle, faBars, faHouse } from '@fortawesome/free-solid-svg-icons'
import { faGithub, faFacebook, faReddit } from '@fortawesome/free-brands-svg-icons'

export default function Home() {
	// getting the users
	const usersRef = query(collection(db, 'users'))
	const users = useCollectionData(usersRef)[0]
	// messages
	const messagesRef = query(collection(db, 'global'), orderBy('timestamp'))
	const messages = useCollectionData(messagesRef)[0]

	// state
	const [usernav, setUsernav] = useState(false)
	const [name, setName] = useState('')
	const [state, setState] = useState(false)
	const [uid, setUid] = useState('')

	const checkAuthState = () => {
		const auth = getAuth();
		onAuthStateChanged(auth, (user) => {
			if (user) {
				setState(true)
				setName(user.displayName!)
				setUid(user.uid!)
			} else {
				setState(false)
			}
		});
	}

	const signIn = () => {
		const auth = getAuth();
		const provider = new GoogleAuthProvider();
		signInWithPopup(auth, provider)
		.then((result) => {
			setName(auth.currentUser!.displayName!)
			setUid(auth.currentUser!.uid)
			setState(true)
		})
	}

	const aichat = async (msg:any) => {
		send(msg)
		const text = msg.replace('@chatgpt', '')
		const response = await fetch('/api/chatgpt?message=' + text)
		const res = await response.text()
		text != '' ?
		addDoc(collection(db, 'global'), {
			user: 'ChatGPT',
			uid: 'chatgpt@firechat',
			message: res,
			reacts: 0,
			timestamp: new Date(),
			replies: ''
		}) : console.log(msg)
	}

	const handleSend = () => {
		const node = (document.getElementById('input-field') as HTMLInputElement)
		const msg = node.value
		if (msg.includes('@chatgpt')) {
			aichat(msg)
		} else {
			send(msg)
		}
		node.value = ''
	}

	const send = (msg:any) => {
		msg != '' ?
		addDoc(collection(db, 'global'), {
			user: name,
			uid: uid,
			message: msg,
			reacts: 0,
			timestamp: new Date(),
			replies: ''
		}) : console.log(msg)
	}

	const check = (event:any) =>{
		event.keyCode == 13 ? handleSend() : null
	}

	useEffect(() => {
		checkAuthState()
	}, [name])

	useEffect(() => {
		const node = document.getElementById('messages')
		node!.scrollTop = node!.scrollHeight
	}, [messages])

  return (
    <div>
      <Head>
        <title>FireChat</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

			<div className={`${styles.gridContainer} h-screen`}>
				<nav className={`MontAlt flex flex-row justify-between items-center p-4 bg-[#000] text-white ${styles.navbar}`}>
					<div >FireChat</div>
					<div className={`md:hidden ${usernav ? 'hidden' : ''}`}>
						<FontAwesomeIcon icon={faBars} onClick={() => setUsernav(true)}/>
					</div>
				</nav>
				<User usernav={usernav} setUsernav={setUsernav}/>
				<section className={`${styles.usersList} h-full bg-[rgba(50,50,50,1)] ${styles.users} ${usernav ? 'p-4 w-full' : 'p-0 w-0'} md:w-full md:p-4 outline outline-2 outline-black`}>
					<div className={`md:hidden ${usernav ? '' : 'hidden'} flex w-full flex-row justify-end`}>
						<FontAwesomeIcon icon={faXmarkCircle} onClick={() => setUsernav(false)} className="md:hidden fa-xl"/>
					</div>
					{
						users && users.map((user) => {
							return (
								<div key={user.id} className="flex flex-row justify-center items-center w-fit mb-1">
									<img src={user.picture} alt="" className="rounded-full mr-1 w-12"/>
									<div className="p-2 mb-1 rounded-md bg-[rgba(100,100,100,0.5)] hover:bg-white w-fit h-fit text-white">
										<a href={`/chat/${user.uid}`}>{user.name}</a>
									</div>
								</div>
							)
						})
					}
				</section>
				<div className={`flex flex-col overflow-y-scroll ${styles.messages}`} id="messages">
					{
						messages && messages.map(msg => <Message key={msg.timestamp} message={msg.message} username={msg.user} pos={msg.uid == uid ? 'right' : 'left'}/>)
					}
				</div>
				<div className={`flex justify-around items-center w-full p-2 bg-black ${styles.footer}`}>
					{
						state ? 
							<>
								<input type="text" className="h-10 rounded-full grow p-2 m-4" id="input-field" onKeyDown={(event) => check(event)}/>
								<div className="cursor-pointer" onClick={() => handleSend()}>
									<FontAwesomeIcon icon={faPaperPlane} className="text-white fa-xl mr-4"/>
								</div> 
							</>
							:
							<div className="p-4 rounded-full bg-blue-400 text-white" onClick={() => signIn()}>Login to send messages</div>
					}
				</div>
			</div>
    </div>
  )
}
